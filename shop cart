import java.util.*;

// =============================
// Product Class
// =============================
class Product {
    private String id;
    private String name;
    private double price;
    private int stock;

    public Product(String id, String name, double price, int stock) {
        this.id = id;
        this.name = name;
        this.price = price;
        this.stock = stock;
    }

    public String getId() { return id; }
    public String getName() { return name; }
    public double getPrice() { return price; }
    public int getStock() { return stock; }

    public void reduceStock(int quantity) { this.stock -= quantity; }
    public void increaseStock(int quantity) { this.stock += quantity; }

    @Override
    public String toString() {
        return String.format("[%s] %s - $%.2f (%d in stock)", id, name, price, stock);
    }
}

// =============================
// CartItem Class
// =============================
class CartItem {
    private Product product;
    private int quantity;

    public CartItem(Product product, int quantity) {
        this.product = product;
        this.quantity = quantity;
    }

    public Product getProduct() { return product; }
    public int getQuantity() { return quantity; }

    public double getTotalPrice() {
        return product.getPrice() * quantity;
    }

    @Override
    public String toString() {
        return String.format("%s x%d = $%.2f", product.getName(), quantity, getTotalPrice());
    }
}

// =============================
// Cart Class
// =============================
class Cart {
    private List<CartItem> items = new ArrayList<>();

    public void addItem(Product product, int quantity) {
        for (CartItem item : items) {
            if (item.getProduct().getId().equals(product.getId())) {
                System.out.println("Item already in cart. Remove it first if you want to change quantity.");
                return;
            }
        }
        if (quantity > product.getStock()) {
            System.out.println("Not enough stock!");
            return;
        }
        items.add(new CartItem(product, quantity));
        System.out.println("Added to cart successfully!");
    }

    public void removeItem(String productId) {
        items.removeIf(item -> item.getProduct().getId().equals(productId));
        System.out.println("Item removed from cart.");
    }

    public double getTotal() {
        return items.stream().mapToDouble(CartItem::getTotalPrice).sum();
    }

    public void viewCart() {
        if (items.isEmpty()) {
            System.out.println("Your cart is empty!");
            return;
        }
        items.forEach(System.out::println);
        System.out.printf("Total: $%.2f%n", getTotal());
    }

    public List<CartItem> getItems() {
        return items;
    }

    public void clear() {
        items.clear();
    }
}

// =============================
// User Class
// =============================
class User {
    private String id;
    private String name;
    private String password;
    private List<List<CartItem>> orderHistory = new ArrayList<>();

    public User(String id, String name, String password) {
        this.id = id;
        this.name = name;
        this.password = password;
    }

    public String getId() { return id; }
    public String getName() { return name; }

    public boolean checkPassword(String pwd) {
        return password.equals(pwd);
    }

    public void addOrder(List<CartItem> order) {
        orderHistory.add(new ArrayList<>(order));
    }

    public void viewOrderHistory() {
        if (orderHistory.isEmpty()) {
            System.out.println("No orders found.");
            return;
        }
        System.out.println("===== ORDER HISTORY =====");
        for (int i = 0; i < orderHistory.size(); i++) {
            System.out.println("Order #" + (i + 1));
            double total = 0;
            for (CartItem item : orderHistory.get(i)) {
                System.out.println("  " + item);
                total += item.getTotalPrice();
            }
            System.out.printf("  Total: $%.2f%n%n", total);
        }
    }
}

// =============================
// Store Class
// =============================
class Store {
    private Map<String, Product> products = new HashMap<>();
    private Map<String, User> users = new HashMap<>();

    public void addProduct(Product product) {
        products.put(product.getId(), product);
    }

    public void showProducts() {
        if (products.isEmpty()) {
            System.out.println("No products available!");
            return;
        }
        System.out.println("===== AVAILABLE PRODUCTS =====");
        products.values().forEach(System.out::println);
    }

    public Product getProduct(String id) {
        return products.get(id);
    }

    public void registerUser(User user) {
        users.put(user.getId(), user);
    }

    public User login(String id, String password) {
        User user = users.get(id);
        if (user != null && user.checkPassword(password)) {
            return user;
        }
        return null;
    }
}

// =============================
// Main Class
// =============================
public class ShoppingCartSystem {
    private static Scanner sc = new Scanner(System.in);
    private static Store store = new Store();
    private static User currentUser;
    private static Cart cart = new Cart();

    public static void main(String[] args) {
        // Preload sample products
        store.addProduct(new Product("P001", "Laptop", 999.99, 5));
        store.addProduct(new Product("P002", "Smartphone", 499.99, 10));
        store.addProduct(new Product("P003", "Headphones", 59.99, 20));

        int choice;
        do {
            System.out.println("\n===== SHOPPING CART SYSTEM =====");
            System.out.println("1. Register");
            System.out.println("2. Login");
            System.out.println("0. Exit");
            System.out.print("Enter choice: ");
            choice = Integer.parseInt(sc.nextLine());

            switch (choice) {
                case 1 -> registerUser();
                case 2 -> loginUser();
                case 0 -> System.out.println("Goodbye!");
                default -> System.out.println("Invalid choice!");
            }
        } while (choice != 0);
    }

    private static void registerUser() {
        System.out.print("Enter user ID: ");
        String id = sc.nextLine();
        System.out.print("Enter name: ");
        String name = sc.nextLine();
        System.out.print("Enter password: ");
        String password = sc.nextLine();

        store.registerUser(new User(id, name, password));
        System.out.println("Registration successful!");
    }

    private static void loginUser() {
        System.out.print("Enter user ID: ");
        String id = sc.nextLine();
        System.out.print("Enter password: ");
        String password = sc.nextLine();

        currentUser = store.login(id, password);
        if (currentUser != null) {
            System.out.println("Welcome, " + currentUser.getName() + "!");
            userMenu();
        } else {
            System.out.println("Invalid credentials.");
        }
    }

    private static void userMenu() {
        int choice;
        do {
            System.out.println("\n===== MAIN MENU =====");
            System.out.println("1. View Products");
            System.out.println("2. Add to Cart");
            System.out.println("3. View Cart");
            System.out.println("4. Remove from Cart");
            System.out.println("5. Checkout");
            System.out.println("6. View Order History");
            System.out.println("0. Logout");
            System.out.print("Enter choice: ");
            choice = Integer.parseInt(sc.nextLine());

            switch (choice) {
                case 1 -> store.showProducts();
                case 2 -> addToCart();
                case 3 -> cart.viewCart();
                case 4 -> removeFromCart();
                case 5 -> checkout();
                case 6 -> currentUser.viewOrderHistory();
                case 0 -> System.out.println("Logging out...");
                default -> System.out.println("Invalid choice!");
            }
        } while (choice != 0);
    }

    private static void addToCart() {
        store.showProducts();
        System.out.print("Enter product ID: ");
        String id = sc.nextLine();
        Product product = store.getProduct(id);
        if (product == null) {
            System.out.println("Product not found!");
            return;
        }
        System.out.print("Enter quantity: ");
        int qty = Integer.parseInt(sc.nextLine());
        cart.addItem(product, qty);
    }

    private static void removeFromCart() {
        cart.viewCart();
        System.out.print("Enter product ID to remove: ");
        String id = sc.nextLine();
        cart.removeItem(id);
    }

    private static void checkout() {
        if (cart.getItems().isEmpty()) {
            System.out.println("Your cart is empty!");
            return;
        }
        System.out.println("===== CHECKOUT =====");
        cart.viewCart();
        System.out.print("Confirm purchase? (y/n): ");
        String confirm = sc.nextLine();
        if (confirm.equalsIgnoreCase("y")) {
            for (CartItem item : cart.getItems()) {
                item.getProduct().reduceStock(item.getQuantity());
            }
            currentUser.addOrder(cart.getItems());
            cart.clear();
            System.out.println("Purchase completed successfully!");
        } else {
            System.out.println("Checkout cancelled.");
        }
    }
}
